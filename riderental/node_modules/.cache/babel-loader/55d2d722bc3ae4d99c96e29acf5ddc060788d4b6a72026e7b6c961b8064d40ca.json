{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACCESS\\\\Desktop\\\\RideRental\\\\riderental\\\\src\\\\UI\\\\Payment.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from 'axios';\nimport './Payment.css';\n\n// Replace with your Stripe public key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe('your-publishable-key-here');\nconst CheckoutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      return;\n    }\n\n    // Create a PaymentIntent on the server\n    const {\n      data: clientSecret\n    } = await axios.post('http://localhost:9093/paymentverification', {\n      // Add any additional data you need to send to the server\n    });\n    const {\n      error,\n      paymentIntent\n    } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Customer Name' // You can replace this with the actual customer name\n        }\n      }\n    });\n    if (error) {\n      console.error(error.message);\n    } else if (paymentIntent.status === 'succeeded') {\n      console.log('Payment successful!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      children: \"Pay Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(CheckoutForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nexport const Payment = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"payment-container\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"paymentmake\",\n    children: \"Make Payment\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Payment Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Elements, {\n      stripe: stripePromise,\n      children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 3\n}, this);\n_c2 = Payment;\nvar _c, _c2;\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"Payment\");","map":{"version":3,"names":["React","loadStripe","Elements","CardElement","useStripe","useElements","axios","jsxDEV","_jsxDEV","stripePromise","CheckoutForm","_s","stripe","elements","handleSubmit","event","preventDefault","data","clientSecret","post","error","paymentIntent","confirmCardPayment","payment_method","card","getElement","billing_details","name","console","message","status","log","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","_c","Payment","className","_c2","$RefreshReg$"],"sources":["C:/Users/ACCESS/Desktop/RideRental/riderental/src/UI/Payment.js"],"sourcesContent":["import React from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport axios from 'axios';\r\nimport './Payment.css';\r\n\r\n// Replace with your Stripe public key\r\nconst stripePromise = loadStripe('your-publishable-key-here');\r\n\r\nconst CheckoutForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n\r\n    // Create a PaymentIntent on the server\r\n    const { data: clientSecret } = await axios.post('http://localhost:9093/paymentverification', {\r\n      // Add any additional data you need to send to the server\r\n    });\r\n\r\n    const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: 'Customer Name', // You can replace this with the actual customer name\r\n        },\r\n      },\r\n    });\r\n\r\n    if (error) {\r\n      console.error(error.message);\r\n    } else if (paymentIntent.status === 'succeeded') {\r\n      console.log('Payment successful!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <CardElement />\r\n      <button type=\"submit\" disabled={!stripe}>\r\n        Pay Now\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const Payment = () => (\r\n  <div className=\"payment-container\">\r\n    <h2 className='paymentmake'>Make Payment</h2>\r\n    <div className=\"payment-form-container\">\r\n      <h1>Payment Details</h1>\r\n      <Elements stripe={stripePromise}>\r\n        <CheckoutForm />\r\n      </Elements>\r\n    </div>\r\n  </div>\r\n);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}